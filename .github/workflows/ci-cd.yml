name: Python CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Agregar permisos explícitos para el workflow
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # Detener el build si hay errores de Python sintaxis
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Salidas de advertencias de estilo de código
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        # Ejecutar las pruebas desde el directorio test/
        python -m unittest discover -s test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nbconvert jupyter papermill
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Execute notebook and generate documentation
      run: |
        # Ejecutar el notebook actualizando datos
        papermill scraping.ipynb scraping_executed.ipynb
        
        # Convertir notebook a HTML
        jupyter nbconvert --to html scraping_executed.ipynb --output scraping.html
        
        # Crear directorio de docs
        mkdir -p docs
        mv scraping.html docs/index.html
        
        # Copiar README a docs
        cp README.md docs/
        
        # Copiar archivos generados (CSV e imágenes) a docs
        if [ -f laptops_data.csv ]; then cp laptops_data.csv docs/; fi
        for img in precio_distribucion.png precio_por_marca.png distribucion_ubicacion.png; do
          if [ -f $img ]; then cp $img docs/; fi
        done
        
        # Opcional: Crear un archivo de índice para acceder fácilmente a los datos
        echo "# Datos de Laptops Actualizados" > docs/data_links.md
        echo "Última actualización: $(date)" >> docs/data_links.md
        echo "" >> docs/data_links.md
        echo "## Archivos disponibles" >> docs/data_links.md
        echo "- [Datos en formato CSV](laptops_data.csv)" >> docs/data_links.md
        echo "- [Distribución de precios](precio_distribucion.png)" >> docs/data_links.md
        echo "- [Precio por marca](precio_por_marca.png)" >> docs/data_links.md
        echo "- [Distribución por ubicación](distribucion_ubicacion.png)" >> docs/data_links.md
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: docs        # La carpeta que contiene los archivos a desplegar
        branch: gh-pages    # La rama donde se publicará
        clean: true         # Eliminar archivos anteriores
