name: Python CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # Detener el build si hay errores de Python sintaxis
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Salidas de advertencias de estilo de código
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        # Ejecutar las pruebas desde el directorio test/
        python -m unittest discover -s test

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install nbconvert jupyter
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Generate documentation
      run: |
        # Convertir notebook a HTML
        jupyter nbconvert --to html scraping.ipynb
        # Crear directorio de docs
        mkdir -p docs
        mv scraping.html docs/index.html
        # Copiar README a docs
        cp README.md docs/
    - name: Deploy to GitHub Pages
      # En lugar de usar peaceiris/actions-gh-pages, usaremos un enfoque más simple
      # que funcionará con los permisos predeterminados
      if: github.ref == 'refs/heads/main'
      run: |
        # Configurar identidad de Git
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        
        # Crear y preparar la rama gh-pages localmente
        git checkout --orphan gh-pages
        git reset --hard
        cp -r docs/* .
        rm -rf docs
        
        # Agregar los archivos y hacer commit
        git add .
        git commit -m "Deploy documentation to GitHub Pages"
        
        # Forzar el push utilizando el token de GitHub con formato adecuado
        git push -f https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git gh-pages
